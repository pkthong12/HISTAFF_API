using API;
using CoreDAL.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.OpenApi.Models;
using RegisterServicesWithReflection.Extensions;
using API.All.SYSTEM.CoreDAL.EntityFrameworkCore;
using API.All.SYSTEM.Common.Middleware;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using CORE.DataContract;
using API.All.DbContexts;
using log4net.Config;
using Prometheus;
using API.Socket;
using Microsoft.AspNetCore.SignalR;
using Microsoft.Extensions.FileProviders;
using System.Net;

var builder = WebApplication.CreateBuilder(args);
/* START: LOGGING */
XmlConfigurator.Configure(new FileInfo("log4net.config"));
builder.Logging.AddLog4Net(); //creating the provider
builder.Logging.ClearProviders();
//builder.Configuration.AddSecurityConfiguration();
builder.Logging.AddConsole();
/* END: LOGGING */

var services = builder.Services;

IConfiguration config = new ConfigurationBuilder()
    .AddJsonFile("appsettings.json")
    .AddEnvironmentVariables()
    .Build();

// Add services to the container.

services.Configure<AppSettings>(config.GetSection("AppSettings"));

//services.AddAuthentication()
//   .AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>
//   {
//       options.Events = new JwtBearerEvents
//       {
//           OnMessageReceived = context =>
//           {
//               return Task.CompletedTask;
//           }
//       };
//   });

services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.Events = new JwtBearerEvents
    {
        OnMessageReceived = context =>
        {
            var accessToken = context.Request.Query["access_token"];

            // If the request is for our hub...
            var path = context.HttpContext.Request.Path;
            if (!string.IsNullOrEmpty(accessToken) &&
                (path.StartsWithSegments("/hubs/signal")))
            {
                // Read the token out of the query string
                context.Token = accessToken;
            }
            return Task.CompletedTask;
        }
    };
});

#region DbContexts
services.AddDbContext<TestDbContext>();
services.AddDbContext<CoreDbContext>();
services.AddDbContext<ProfileDbContext>();
services.AddDbContext<RefreshTokenContext>();
#endregion DbContexts

// DI
services.RegisterServices(builder.Configuration);

#region: NONE-STANDARD-DI
// To set NameIdentifier property of each Hub connection
services.AddSingleton<IUserIdProvider, CustomUserIdProvider>();
#endregion: NONE-STANDARD-DI

services.AddRouting(o => o.LowercaseQueryStrings = true);
//services.AddAuthorization();

services.AddIdentity<SysUser, IdentityRole>(opts =>
{
    opts.Password.RequiredUniqueChars = 0;
    opts.Password.RequireNonAlphanumeric = false;
})
.AddEntityFrameworkStores<CoreDbContext>()
.AddDefaultTokenProviders();


services.AddCors(options =>
{
    /* Latter, in Production, we need to add specific policy */
    options.AddPolicy("Development",
          builder =>
              builder
                .AllowAnyHeader()
                .AllowAnyMethod()
                .AllowCredentials()
                .SetIsOriginAllowed(_ => true)
          );
});

services.AddSignalR();

services.AddControllers(options =>
{
    //Add Your Filter
    options.Filters.Add<ModelValidationFilterAttribute>();
}).ConfigureApiBehaviorOptions(options =>
{
    //Disable The Default
    options.SuppressModelStateInvalidFilter = true;
})
    .AddNewtonsoftJson(options =>
    {
        options.SerializerSettings.ContractResolver = new SnackToCamelCaseContractResolver();
    });



// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
// services.AddSwaggerGenNewtonsoftSupport();
services.AddEndpointsApiExplorer();
services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("system", new OpenApiInfo { Title = "Histaff SYSTEM Swagger UI", Version = "v5472" });
    c.SwaggerDoc("om", new OpenApiInfo { Title = "Histaff OM Swagger UI", Version = "v5472" });
    c.SwaggerDoc("profile", new OpenApiInfo { Title = "Histaff PROFILE Swagger UI", Version = "v5472" });
    c.SwaggerDoc("attendance", new OpenApiInfo { Title = "Histaff ATTENDANCE Swagger UI", Version = "v5472" });
    c.SwaggerDoc("payroll", new OpenApiInfo { Title = "Histaff PAYROLL Swagger UI", Version = "v5472" });
    c.SwaggerDoc("developer", new OpenApiInfo { Title = "Histaff DEVELOPER TESTING Swagger UI", Version = "v5472" });
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = @"JWT Authorization header using the Bearer scheme. 
                      Enter 'Bearer' [space] and then your token in the text input below.
                      Example: 'Bearer 12345abcdef'",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement()
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            },
                            Scheme = "oauth2",
                            Name = "Bearer",
                            In = ParameterLocation.Header,
                        },
                        new List<string>()
                    }
                });

    /* Swagger Grouping */
    c.TagActionsBy(api =>
    {
        if (api.GroupName != null)
        {
            return new[] { api.GroupName };
        }

        if (api.ActionDescriptor is ControllerActionDescriptor controllerActionDescriptor)
        {
            return new[] { controllerActionDescriptor.ControllerName };
        }

        throw new InvalidOperationException("Unable to determine tag for endpoint.");
    });
    c.DocInclusionPredicate((name, api) =>
    {
        try
        {
            if (api.GroupName == "0-DEVELOPER-TESTING" && name == "developer")
            {
                Console.WriteLine();
            }

            if (api.GroupName == null)
            {
                return false;
            };
            if (api.GroupName.ToLower().Substring(2, name.Length) == name.ToLower())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            return false;
        }
    });
});
builder.Services.AddMetrics();//Add this -> to set default metrics data configuration
builder.Services.AddMetricsTrackingMiddleware();




var app = builder.Build();

/* Latter, in Production, we need to use specific policy */
app.UseCors("Development");

/* START PROMETHEUS */
// prometheus
app.UseMiddleware<MetricLogMiddleware>();
/* END PROMETHEUS */

app.UseMiddleware<JwtMiddleware>();


// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/system/swagger.json", "SYSTEM API");
        c.SwaggerEndpoint("/swagger/om/swagger.json", "OM API");
        c.SwaggerEndpoint("/swagger/profile/swagger.json", "PROFILE API");
        c.SwaggerEndpoint("/swagger/attendance/swagger.json", "ATTENDANCE API");
        c.SwaggerEndpoint("/swagger/payroll/swagger.json", "PAYROLL API");
        c.SwaggerEndpoint("/swagger/developer/swagger.json", "DEVELOPER TESTING API");
    });
}

/* START METRIC SERVER */
app.UseMetricServer();//Add this line -> I dont know why its needed but I believe there is good reason :)
app.MapMetrics();
/* END METRIC SERVER */

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseAuthentication();

app.UseStaticFiles(new StaticFileOptions
{
    FileProvider = new PhysicalFileProvider(
           Path.Combine(builder.Environment.ContentRootPath, "static")),
    RequestPath = "/static"
});

/* START: OnPrepareResponse will be hit only when static files stored inside wwwroot */
app.UseStaticFiles(new StaticFileOptions
{
    OnPrepareResponse = ctx =>
    {
        if (ctx.Context.Request.Path.StartsWithSegments("/avatars"))
        {
            var authorization = ctx.Context.Request.HttpContext.Request.Headers["Authorization"];
            Console.WriteLine(authorization);
            // respond HTTP 401 Unauthorized with empty body.
            ctx.Context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
            ctx.Context.Response.ContentLength = 0;
            ctx.Context.Response.Body = Stream.Null;
        }
    }
});
/* END: OnPrepareResponse will be hit only when static files stored inside wwwroot */

app.UseAuthorization();

app.MapControllers();

app.MapHub<SignalHub>("/hubs/signal");

app.Run();